/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

package com.android.tools.build.bundletool.device;

import com.android.bundle.Devices.ApkMatchingMetadata;
import com.android.bundle.Devices.DeviceSpec;
import com.android.bundle.Targeting.ApkTargeting;
import com.android.bundle.Targeting.VariantTargeting;

/** Calculates whether a given device can be served an APK generated by the bundle tool. */
public class ApkMatcher {

  private final SdkVersionMatcher sdkVersionMatcher;
  private final AbiMatcher abiMatcher;
  private final ScreenDensityMatcher screenDensityMatcher;
  private final LanguageMatcher languageMatcher;

  public ApkMatcher(DeviceSpec deviceSpec) {
    this.sdkVersionMatcher = new SdkVersionMatcher(deviceSpec);
    this.abiMatcher = new AbiMatcher(deviceSpec);
    this.screenDensityMatcher = new ScreenDensityMatcher(deviceSpec);
    this.languageMatcher = new LanguageMatcher(deviceSpec);
  }
  /**
   * Returns whether a given APK generated by the Bundle Tool should be installed on a device.
   *
   * @param apkMatchingMetadata a message describing the APK matching configuration.
   * @return whether to deliver the APK to the device.
   */
  public boolean matchesApk(ApkMatchingMetadata apkMatchingMetadata) {
    return matchesVariantTargeting(apkMatchingMetadata) && matchesApkTargeting(apkMatchingMetadata);
  }

  private boolean matchesVariantTargeting(ApkMatchingMetadata apkMatchingMetadata) {
    VariantTargeting variantTargeting = apkMatchingMetadata.getVariantTargeting();
    return sdkVersionMatcher
        .getVariantTargetingPredicate()
        .and(abiMatcher.getVariantTargetingPredicate())
        .and(screenDensityMatcher.getVariantTargetingPredicate())
        .test(variantTargeting);
  }

  private boolean matchesApkTargeting(ApkMatchingMetadata apkMatchingMetadata) {
    ApkTargeting apkTargeting = apkMatchingMetadata.getApkTargeting();
    return sdkVersionMatcher
        .getApkTargetingPredicate()
        .and(abiMatcher.getApkTargetingPredicate())
        .and(screenDensityMatcher.getApkTargetingPredicate())
        .and(languageMatcher.getApkTargetingPredicate())
        .test(apkTargeting);
  }
}
